name: CI/CD for Booklist Manager

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v3

      - name: üîß Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üì• Install dependencies
        run: |
          cd backend  # Ensure you're in the correct directory where package.json is located
          npm install

      - name: ‚úÖ Run tests
        run: |
          cd backend  # Run tests in the backend directory
          chmod +x ./node_modules/.bin/jest  # Ensure Jest has execute permissions
          npx jest ./tests  # Adjust path if your tests are in a different folder

      - name: üìä Upload coverage report
        uses: actions/upload-artifact@main
        with:
          name: coverage-report
          path: backend/coverage/  # Adjust if your coverage directory differs

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üöÄ Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "üìÇ Navigating to the app directory..."
            cd backend || { echo "‚ùå Directory not found"; exit 1; }

            echo "üîÑ Pulling latest changes..."
            git pull origin main || { echo "‚ùå Git pull failed"; exit 1; }

            echo "üì¶ Installing dependencies..."
            npm install || { echo "‚ùå npm install failed"; exit 1; }

            echo "‚ôªÔ∏è Restarting or starting the app..."
            pm2 restart all || pm2 start server.js --name booklist-api

            echo "üìã Checking logs..."
            tail -n 100 /var/log/syslog 2>/dev/null || tail -n 100 /var/log/messages 2>/dev/null || echo "‚ö†Ô∏è No logs found."

            echo "ü©∫ Running health check..."
            curl --fail http://localhost:5000/health || { echo "‚ùå Health check failed"; exit 1; }

            echo "‚úÖ Application deployed and healthy!"

  logging:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Install logging utilities
        run: sudo apt-get install -y jq

      - name: üßæ Generate and analyze logs
        run: |
          echo "üìù Generating logs..."
          echo "$(date) - Deployment successful" >> app.log
          tail -n 10 app.log

      - name: ‚òÅÔ∏è Push logs to remote service (optional)
        run: |
          echo "üì§ Pushing logs..."
          curl -X POST -H "Content-Type: text/plain" --data-binary @app.log https://log-management-service.com/api/logs || echo "‚ö†Ô∏è Log push failed (optional)"
